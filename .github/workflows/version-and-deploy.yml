name: Version and Deploy

on:
  push:
    branches:
      - main

jobs:
  version-and-deploy:
    name: Version and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Clonar o reposit√≥rio
        uses: actions/checkout@v4

      - name: üîß Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üß™ Instalar depend√™ncias
        run: npm install

      - name: üìù Detectar tipo de commit e incrementar vers√£o
        id: version
        run: |
          # Obter a mensagem do √∫ltimo commit
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # Ler vers√£o atual
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Extrair o tipo do commit (primeira parte antes do :)
          COMMIT_TYPE=$(echo "$COMMIT_MSG" | cut -d':' -f1)
          echo "Commit type: $COMMIT_TYPE"
          
          # Detectar tipo de commit e incrementar vers√£o
          if [[ $COMMIT_MSG == BREAKING* ]] || [[ $COMMIT_MSG == *BREAKING* ]]; then
            echo "Detected: major version bump"
            COMMIT_TYPE="breaking"
            # Incrementar major version (1.0.0 -> 2.0.0)
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=$((VERSION_PARTS[0] + 1))
            MINOR=0
            PATCH=0
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          elif [[ $COMMIT_MSG == feat:* ]]; then
            echo "Detected: minor version bump"
            # Manter o tipo original (feat)
            # Incrementar minor version (1.0.0 -> 1.1.0)
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=$((VERSION_PARTS[1] + 1))
            PATCH=0
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          else
            echo "Detected: patch version bump"
            # Manter o tipo original (fix, chore, docs, etc.)
            # Incrementar patch version (1.0.0 -> 1.0.1)
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=$((VERSION_PARTS[2] + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "commit_type=$COMMIT_TYPE" >> $GITHUB_OUTPUT

      - name: üîÑ Atualizar package.json
        run: |
          # Atualizar vers√£o no package.json
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          
          # Commit e push da nova vers√£o usando o tipo do commit original
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json
          git commit -m "${{ steps.version.outputs.commit_type }}: bump version to ${{ steps.version.outputs.version }}"
          git push

      - name: üè∑Ô∏è Criar tag
        run: |
          git tag ${{ steps.version.outputs.version_tag }}
          git push origin ${{ steps.version.outputs.version_tag }}

      - name: üê≥ Login no Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: üèóÔ∏è Build da imagem
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/p2-api:${{ steps.version.outputs.version_tag }} .

      - name: üì§ Push da imagem para o Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/p2-api:${{ steps.version.outputs.version_tag }}

      - name: üöÄ Deploy para Render
        run: |
          curl -X POST https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
            -H 'Authorization: Bearer ${{ secrets.RENDER_TOKEN }}' \
            -H 'Content-Type: application/json' \
            -d '{}'

  notify-on-failure:
    name: üìß Notificar Falha
    runs-on: ubuntu-latest
    if: failure()
    needs: version-and-deploy

    steps:
      - name: üìß Enviar email de notifica√ß√£o
        run: |
          # Instalar curl se n√£o estiver dispon√≠vel
          which curl || apt-get update && apt-get install -y curl
          
          # Preparar dados do email
          SUBJECT="‚ùå Pipeline falhou - P2-CI-CD"
          BODY="O pipeline de CI/CD falhou na execu√ß√£o.
          
          Reposit√≥rio: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Execu√ß√£o: ${{ github.run_id }}
          
          Para mais detalhes, acesse: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Enviar email usando curl com SMTP
          curl --mail-from "${{ secrets.EMAIL_USER }}" \
               --mail-rcpt "${{ secrets.MAIL_TO }}" \
               --upload-file - \
               --user "${{ secrets.EMAIL_USER }}:${{ secrets.EMAIL_PASS }}" \
               --ssl-reqd \
               --url "smtp://${{ secrets.EMAIL_SERVER }}:${{ secrets.EMAIL_PORT }}" <<EOF
          From: ${{ secrets.EMAIL_USER }}
          To: ${{ secrets.MAIL_TO }}
          Subject: $SUBJECT
          Content-Type: text/plain; charset=UTF-8
          
          $BODY
          EOF 