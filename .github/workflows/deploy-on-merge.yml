name: Deploy on Merge

on:
  pull_request:
    branches:
      - main
      - master
    types: [closed]

# Configurar permissões globais para o workflow
permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/p2-api

jobs:
  deploy-on-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug branch info
        run: |
          echo "Current branch: ${{ github.ref_name }}"
          echo "Full ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          git branch -a

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Version tag: v$VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version_tag }}
            ${{ env.IMAGE_NAME }}:main
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Render
        env:
          RENDER_TOKEN: ${{ secrets.RENDER_TOKEN }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "🚀 Iniciando deploy no Render após merge do PR #${{ github.event.pull_request.number }}"
          # Trigger deploy no Render via API
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "clearCache": "do_not_clear"
            }'

      - name: Wait for deployment
        run: |
          echo "Aguardando deploy no Render..."
          sleep 30

      - name: Health check
        run: |
          # Aguardar até 5 minutos para o deploy completar
          for i in {1..30}; do
            if curl -f "${{ secrets.RENDER_URL }}/health" > /dev/null 2>&1; then
              echo "✅ Deploy realizado com sucesso após merge!"
              break
            fi
            echo "⏳ Aguardando deploy... ($i/30)"
            sleep 10
          done

      - name: Notify success
        run: |
          echo "✅ Deploy realizado com sucesso após merge do PR!"
          echo "🔗 PR: ${{ github.event.pull_request.html_url }}"
          echo "👤 Autor: ${{ github.event.pull_request.user.login }}"
          echo "📝 Título: ${{ github.event.pull_request.title }}"
          echo "🐳 Imagem Docker publicada no Docker Hub"
          echo "🚀 Deploy realizado no Render" 